def process_llm_fewshot_translation_output(data):
    return [out.split('\n\n')[-1] for out in data]


def process_llm_zeroshot_translation_output(data):
    # remove additional comments generated by llms either before or after the translation using rule-based heuristics
    eval_sents = []
    newline_count = 0
    slash_count = 0
    parenthesis_count = 0
    no_match_count = 0
    for d in data:
        no_match = True
        if '/' in d:
            slash_count += 1
            no_match = False
        if '(' in d:
            parenthesis_count += 1
            no_match = False
        if '\n' in d:
            newline_count += 1
            no_match = False

            possible_cands = []
            for sent in d.split('\n'):
                if 'translat' in sent:
                    continue
                if 'gender' in sent:
                    continue
                if 'sentence' in sent:
                    continue
                if 'note' in sent.lower():
                    continue
                if sent.strip() == '':
                    continue
                possible_cands.append(sent.strip())
            if len(possible_cands) < 1:
                eval_sents.append(d.split('\n')[0])
            else:
                eval_sents.append(possible_cands[0])
        else:
            eval_sents.append(d)
        if no_match:
            no_match_count += 1
    return eval_sents


def process_llama2_fewshot_translation_output(data):
    processed = []
    for sent in data:
        last_out = sent.rsplit('[/INST]', 1)[-1].strip()
        sents = [l.strip() for l in last_out.split('\n') if l.strip() != ""]

        # select the first sentence after a sentence ends with ":"
        if len(sents) == 2:
            if 'Note' in sents[1]:
                processed.append(sents[0])
            else:
                processed.append(sents[1])
        elif len(sents) < 2:
            processed.append(sents[0])
        else:
            selected = False
            for sent in sents:
                if not selected and sent[-1] == ":":
                    selected = True
                else:
                    processed.append(sent)
                    break
            else: # fallback to firt sentence
                processed.append(sents[0])
    return processed


def process_llama2_zeroshot_translation_output(data):
    processed = []
    for text in data:
        # split to get llama generated output
        out = text.split('[/INST]',1)[1]

        # split output into sents and skip empty sents
        sents = [x.strip() for x in out.split('\n') if x.strip() != '']

        # get the second sentence if the first sentence contains something about 'translat'..
        if len(sents) > 1 and 'translat' in sents[0]:
            final_sent = sents[1]
        else:
            # get the first sentence by default
            final_sent = sents[0]
        if 'translat' in final_sent and "would be translated as" in out:
            for sent in sents:
                if "would be translated as" in sent:
                    behind_part = sent.split("would be translated as")[1]
                    idx = behind_part.find('"')
                    r_idx = behind_part.find('"', idx+1)
                    if idx != r_idx:
                        final_sent = behind_part[idx+1:r_idx]
        # remove quotes if the whole translation is inside a quote
        if final_sent[0] == '"' and final_sent[-1] == '"':
            final_sent = final_sent[1:-1]
        processed.append(final_sent)
    return processed
